---
- name: cluster Role | master | create certificates for grant consul access to etcd
  include_role:
    name: entercloudsuite.ansible_cfssl
    public: yes
  vars:
    install: False
    configure: True
    organizations: etcd
    certificate_base_path: /opt/consul/pki
    dir_list:
      - "{{ certificate_base_path }}"
      - "{{ certificate_configurations_base_path }}"
      - "{{ certificate_configurations_base_path_organizations }}"
    certificate_directive:
      node_certificate:
        path: "{{ certificate_base_path }}/{{ organizations }}"
        configurations_path: "{{ certificate_configurations_base_path_organizations }}/etcd-client-{{ansible_hostname}}.json"
        certificate_name: server
        configuration:
          CN: Server
          hosts:
            - 127.0.0.1
            - localhost
            - "{{ ansible_hostname }}.{{ base_domain }}"
            - "{{ ansible_fqdn }}"
          key:
            algo: rsa
            size: 2048
      certificate_config:
        path: "{{ certificate_base_path }}/certificate"
        configurations_path: "{{ certificate_configurations_base_path_organizations }}/certificate.json"
        configuration:
          signing:
            default:
              expiry: 43800h
            profiles:
              client:
                expiry: 43800h
                usages:
                  - signing
                  - digital signature
                  - key encipherment
                  - client auth
    command_run:
      client_cert:
        shell: "cfssl gencert -ca=/etc/kubernetes/pki/etcd/ca.crt -ca-key=/etc/kubernetes/pki/etcd/ca.key -config={{ certificate_directive.certificate_config.configurations_path }} -profile=client {{ certificate_directive.node_certificate.configurations_path }} | cfssljson -bare {{ ansible_hostname }}-consul"
        chdir: "{{ certificate_directive.node_certificate.path }}/"
        creates: "{{ certificate_directive.node_certificate.path }}/{{ ansible_hostname }}-consul.pem"
        delegate_to: "{{ ansible_hostname }}"

- name: copy etcd ca.crt to consul cert folder
  copy:
    src: /etc/kubernetes/pki/etcd/ca.crt
    dest: /opt/consul/pki/etcd/ca.crt
    owner: consul
    group: consul

- name: cluster Role | master | set permission
  file:
    path: /opt/consul/pki
    owner: consul
    group: consul
    state: directory
    recurse: yes

- name: all | master | post_task | consul service account
  copy:
    src: kubernetes/consul_cluster_rolebinding.yaml
    dest: /tmp/consul_cluster_rolebinding.yaml

- name: all | master | post_task | deploy script for create consul kube_config
  copy:
    src: scripts/consul_kubectl.sh
    dest: /tmp/consul_kubectl.sh
    owner: root
    group: root
    mode: 0700

- name: all | master | post_task | create kubeconfig for consul
  command: /tmp/consul_kubectl.sh

- name: all | master | post_task | restart consul for reload check
  service:
    name: consul
    state: restarted

- name: all | master | post_task | configure kubectl for root user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config

- name: all | master | post_task | Generate certificate for Prometheus
  include_tasks: tasks/helpers/generate_certificate.yml
  vars:
    delegate_host_for_cert_generations: "127.0.0.1"
    cert_path: "/root/prometheus_cert"
    cert_name: "prometheus"
    cfssl_conf:
      profile: "client"
      path_ca: "/etc/kubernetes/pki/etcd/ca.crt"
      path_key: "/etc/kubernetes/pki/etcd/ca.key"
      path_config: "/etc/cfssl/etcd/certificate.json"
    server_conf:
      CN: Server
      hosts:
        - 127.0.0.1
        - localhost
        - "{{ ansible_hostname }}"
        - "{{ ansible_fqdn }}"
        - "{{ cluster_name }}-etcd.service.automium.consul"
      key:
        algo: rsa
        size: 2048
- name: all | master | post_task | create etcd secret
  set_fact:
    prometheus_etcd_ca: "{{ lookup('file', '/root/prometheus_cert/ca.crt') }}"
    prometheus_etcd_crt: "{{ lookup('file', '/root/prometheus_cert/prometheus.pem') }}"
    prometheus_etcd_key: "{{ lookup('file', '/root/prometheus_cert/prometheus-key.pem') }}"

- name: all | master | post_task | create namespace cattel-prometheus if not present
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: cattle-prometheus
        labels:
          name: cattle-prometheus

- name: all | master | post_task | create or patch etcd secret for prometheus
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        namespace: cattle-prometheus
        name: etcd-certs
      type: Opaque
      data:
        ca.crt: "{{ prometheus_etcd_ca | b64encode }}"
        prometheus_key.pem: "{{ prometheus_etcd_key | b64encode }}"
        prometheus.pem: "{{ prometheus_etcd_crt | b64encode }}"

- name: all | master | post_task | create or patch etcd Service in kube-system
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: etcd-k8s
        namespace: kube-system
        labels:
          k8s-app: etcd-server
      spec:
        ports:
        - name: port
          port: 2379
          protocol: TCP
        selector:
          component: etcd
