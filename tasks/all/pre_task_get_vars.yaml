---
- name: vars | print env variable cluster_name
  debug:
    var: cluster_name

- name: vars | print env name
  debug:
    var: name

- name: set_vars kubeadm_custom to others
  set_fact:
    kubeadm_custom_row: "{{ kubeadm_custom | from_yaml }}"

- name: set_vars init_role to others
  set_fact:
    init_role: others
  tags: others

- name: set_vars init_role to bootstrap
  set_fact:
    init_role: bootstrap
  tags: bootstrap

- name: set_vars check if "{{ cluster_name }}-kube-master.service.automium.consul" exist
  command: "dig +short {{ cluster_name }}-kube-master.service.automium.consul"
  register: dnsrecord_kube_master

- name: set_vars check if "{{ cluster_name }}-etcd.service.automium.consul" exist
  command: "dig +short {{ cluster_name }}-etcd.service.automium.consul"
  register: dnsrecord_etcd

- name: set_vars check if "{{ cluster_name }}-kube-apiserver.service.automium.consul" exist
  command: "dig +short {{ cluster_name }}-kube-master.service.automium.consul"
  register: dnsrecord_kube_apiserver

- name: set_vars cluster_role to master
  set_fact:
    cluster_role: "master"
  when: master == "true"

- name: set_vars cluster_role to node
  set_fact:
    cluster_role: "node"
  when: node == "true"

- name: vars | print env dnsrecord_kube_master
  debug:
    var: dnsrecord_kube_master

- name: vars | print env dnsrecord_etcd
  debug:
    var: dnsrecord_etcd

- name: vars | print env dnsrecord_kube_apiserver
  debug:
    var: dnsrecord_kube_apiserver

- name: vars | print env init_role
  debug:
    var: init_role

- name: vars | print env cluster_role
  debug:
    var: cluster_role

- name: var | check if master pool is not boostrap
  set_fact:
    init_role: others
  when:
    - dnsrecord_kube_master.stdout != ""
    - dnsrecord_etcd.stdout != ""
    - dnsrecord_kube_apiserver.stdout != ""
    - init_role == "bootstrap"
    - cluster_role == "master"

- name: vars | print env init_role
  debug:
    var: init_role

- name: vars | print env cluster_role
  debug:
    var: cluster_role

- name: vars | set service_provider to provider
  set_fact:
    service_provider: "{{ provider }}"

- name: vars | set service_provider to kube_provider
  set_fact:
    service_provider: "{{ kube_provider }}"
  when: kube_provider != ""

- name: vars | print new provider
  debug:
    var: service_provider