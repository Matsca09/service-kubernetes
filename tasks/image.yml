---
- name: image | add apt-transport-https
  apt:
    name: apt-transport-https
    state: present
    update_cache: yes

- name: image | add Kubernetes repository GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: image | add Kubernetes repository in APT
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: image | install kubernetes binaries
  apt:
    name:
      [
        "kubeadm={{ k8s_version }}-00",
        "kubelet={{ k8s_version }}-00",
        "kubectl={{ k8s_version }}-00",
        "glusterfs-client",
        "python-pip",
      ]
    state: present

- name: image | install consul.py
  pip:
    name: "{{ item }}"
  with_items:
    - python-consul==1.0.0
    - netaddr

- name: image | enable kubelet service
  service:
    name: kubelet
    enabled: yes

- name: image | create Kubernetes configuration directory
  file:
    path: /etc/kubernetes
    state: directory
    recurse: yes
    owner: root
    group: root

- name: image | add module dm_thin_pool for thin volumes provisioning
  modprobe:
    name: "{{ item }}"
    state: "present"
  with_items: "{{ kernel_modules }}"
  when: testmode != "true"

- name: image | add module dm_thin_pool for thin volumes provisioning
  lineinfile:
    path: /etc/modules
    state: present
    create: yes
    line: "{{ item }}"
  with_items: "{{ kernel_modules }}"
  when: testmode != "true"

- name: image | create roles requirement
  copy:
    content: |
      - src: entercloudsuite.consul
        version: 2.0.2
      - src: entercloudsuite.docker
        version: 2.0.4
      - src: entercloudsuite.ansible_cfssl
        version: 1.0.2
      - src: entercloudsuite.filebeat
        version: 1.4.1
    dest: /usr/src/cloud/requirement.yml

- name: image | ensure roles directory exist
  file:
    path: /usr/src/cloud/roles
    state: directory

- name: image | download roles
  shell: |
    source venv/bin/activate
    ansible-galaxy install -r requirement.yml -p roles
  args:
    chdir: /usr/src/cloud
    executable: /bin/bash

- name: image | set docker cgroup driver for test mode
  set_fact:
    docker_cgroup_driver: cgroupfs
  when: testmode == "true"

- name: image | install consul service
  include_role:
    name: entercloudsuite.consul
    public: yes
  vars:
    consul_version: 1.4.4
    configure: false
    install: true
    consul_service_status: "stopped"

- name: image | deploy consul check kubernetes-check-node
  copy:
    src: scripts/kubernetes-check-node.sh
    dest: /opt/consul/bin/kubernetes-check-node
    owner: consul
    group: consul
    mode: 0700

- name: image | deploy consul check etcd-consul-check
  copy:
    src: scripts/etcd-consul-check.py
    dest: /opt/consul/bin/etcd-consul-check
    owner: consul
    group: consul
    mode: 0700

- name: image | make sure consul data is free
  file:
    path: /opt/consul/data
    state: absent

- name: image | import docker role
  include_role:
    name: entercloudsuite.docker
    public: yes
  vars:
    docker_end_status: started

- name: image | download Kubernetes system containers
  command: "kubeadm config images pull --kubernetes-version v{{ k8s_version }}"

- name: image | install etcdctl tools in hosts
  shell: |
    #!/bin/bash

    # get etcd image name and version
    IMAGENAME=$(docker image ls | grep etcd | awk '{print $1":"$2 }')
    # copy etcdctl from container to hosts

    ID=$(docker create $IMAGENAME)
    docker cp $ID:/usr/local/bin/etcdctl /usr/local/bin/etcdctl
    docker rm -v $ID
    # configure root shell for use ETCD_APIV3
    echo "export ETCDCTL_API=3" >> /root/.bashrc

- name: image | stop Docker
  systemd:
    name: docker
    state: stopped

- name: image | lock Docker and Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubectl
    - kubelet
    - kubeadm
    - kubernetes-cni
    - docker-ce

- name: image | remove useless dependecy
  apt:
    name: ["unattended-upgrades"]
    state: absent

- name: image | create  NetworkManager/conf.d directory
  file:
    path: /etc/NetworkManager/conf.d
    state: directory
    mode: '0755'

- name: image | configure network manager for working wit calico
  copy:
    src: calico/network_manager.conf
    dest: /etc/NetworkManager/conf.d/calico.conf

- name: prevent out of space in the conntrack table
  sysctl:
    name: net.netfilter.nf_conntrack_max
    value: '1000000'
    sysctl_set: yes
    state: present
    reload: yes

- name: image | install cfssl binary
  include_role:
    name: entercloudsuite.ansible_cfssl
    public: yes
  vars:
    install: True
    configure: False
    download_list:
      - "{{ cfssl_pkg.cfssl }}"
      - "{{ cfssl_pkg.cfssljson }}"

- name: image | install filebeat
  include_role:
    name: entercloudsuite.filebeat
  vars:
    add_repo: "deb https://artifacts.elastic.co/packages/7.x/apt stable main"
    filebeat_pakage: filebeat=7.4.2
    filebeat_conf:
    filebeat_enable_modules:
      - system
    filebeat_enabled: false
    filebeat_state: stopped
